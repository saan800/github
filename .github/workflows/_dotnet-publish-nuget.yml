name: dotnet-publish-nuget

on:
  workflow_call:
    inputs:
      working-directory:
        description: "The working directory for the job. Defaults to '.' which is the root of the repository. Do not include trailing '/'"
        required: false
        type: string
        default: "."
      os:
        required: false
        type: string
        default: ubuntu-latest
      dotnet-version:
        required: false
        type: string
        default: 9.0.x
      package-artifact-name:
        description: "Name of the artifact to upload to github build artifacts. Should match what was uploaded in dotnet-build-and-package"
        required: false
        type: string
        default: "packages"
      num-github-prerelease-packages-to-keep:
        description: "We cleanup github prerelease nuget packages. Configure how many to keep"
        type: number
        required: false
        default: 50
      upload-to-github:
        description: "Upload pacakge to github package registry"
        type: boolean
        required: false
        default: false
      upload-to-nuget:
        description: "Upload pacakge to nuget.org registry"
        type: boolean
        required: false
        default: false
    secrets:
      GITHUB_ACCESS_TOKEN:
        description: "(ie: GITHUB_TOKEN) GitHub token to upload package to GitHub Package Registry. Required if upload-to-github is true"
        required: false
      NUGET_API_KEY:
        description: "API key for nuget.org. Required if upload-to-nuget is true"
        required: false

permissions:
  contents: read
  packages: write

jobs:
  publish-nuget-package:
    runs-on: ${{ inputs.os }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            aka.ms:443
            api.nuget.org:443
            builds.dotnet.microsoft.com:443
            dc.services.visualstudio.com:443
            dotnetcli.azureedge.net:443
            nuget.pkg.github.com:443
            www.nuget.org:443

      # Download the artifact generated in the build job
      - name: Download artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # 5.0.0
        with:
          name: ${{ inputs.package-artifact-name }}
          path: ${{ inputs.working-directory }}/build-packages # Path to download the artifact

      - name: Setup .NET SDK ${{ inputs.dotnet-version }}
        uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5.0.0
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Publish nuget pacakge(s) to GitHub Package Registry
        if: ${{ inputs.upload-to-github }}
        working-directory: ${{ inputs.working-directory }}
        run: >
          dotnet nuget push build-packages/*.nupkg
          --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
          --api-key ${{ secrets.GITHUB_ACCESS_TOKEN }}

      - name: Publish symbol pacakge(s) to GitHub Package Registry
        if: ${{ inputs.upload-to-github }}
        working-directory: ${{ inputs.working-directory }}
        run: >
          dotnet nuget push build-packages/*.snupkg
          --skip-duplicate
          --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
          --api-key ${{ secrets.GITHUB_ACCESS_TOKEN }}

      - name: Publish nuget and symbols package(s) to NuGet.org
        if: ${{ inputs.upload-to-nuget }}
        working-directory: ${{ inputs.working-directory }}
        run: >
          dotnet nuget push build-packages/*.nupkg
          --source https://api.nuget.org/v3/index.json
          --api-key ${{ secrets.NUGET_API_KEY }}

  discover-packages:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            nuget.pkg.github.com:443

      # Download the artifact generated in the build job
      - name: Download artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # 5.0.0
        with:
          name: ${{ inputs.package-artifact-name }}
          path: ${{ inputs.working-directory }}/build-packages # Path to download the artifact

      - name: Find package IDs from .nupkg files
        id: set-matrix
        working-directory: ${{ inputs.working-directory }}
        run: |
          # Find all .nupkg files in build-packages
          nupkgs=$(find build-packages -type f -name '*.nupkg')

          if [ -z "$nupkgs" ]; then
            echo "No .nupkg files found in build-packages/"
            echo "matrix=[]" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Extract package IDs (everything before the last dot + version)
          packages=$(basename -s .nupkg $nupkgs | sed -E 's/\.[0-9]+(\.[0-9]+)*(-[A-Za-z0-9]+)?$//' | sort -u)

          # Convert to JSON array for matrix
          json=$(printf '%s\n' $packages | jq -R . | jq -s '{package: .}')

          echo "matrix=$json" >> $GITHUB_OUTPUT

  cleanup:
    needs: discover-packages
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.discover-packages.outputs.matrix) }}
    steps:
      - name: Delete old versions for ${{ matrix.package }}
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ matrix.package }}
          package-type: nuget
          min-versions-to-keep: ${{ inputs.num-github-prerelease-packages-to-keep }}
          delete-only-pre-release-versions: true
