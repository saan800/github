name: dotnet-build-and-test

on:
  workflow_call:
    inputs:
      working-directory:
        description: "The working directory for the job. Defaults to '.' which is the root of the repository. Do not include trailing '/'"
        required: false
        type: string
        default: "."
      os:
        required: false
        type: string
        default: ubuntu-latest
      dotnet-version-matrix:
        description: 'JSON array of dotnet-version/framework pairs. eg ''[{ "dotnet-version": "8.0.x", "framework": "net8.0" }, { "dotnet-version": "9.0.x", "framework": "net9.0" }]'''
        required: false
        type: string
      dotnet-version:
        description: "Dotnet SDK version to use if no matrix is provided"
        required: false
        type: string
        default: 9.0.x
      codecov-slug:
        description: "Slug to upload code coverage results for Codecov. e.g. saan800/saansoft-correlationId"
        required: false
        type: string
      codecov-flag:
        description: "Flag to use for Codecov. e.g. unittests"
        required: false
        type: string
        default: unittests
    secrets:
      CODECOV_TOKEN:
        required: false

permissions:
  contents: read

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ -n "${{ inputs.dotnet-version-matrix }}" ]; then
            echo "matrix=${{ inputs.dotnet-version-matrix }}" >> $GITHUB_OUTPUT
          else
            json="[ { \"dotnet-version\": \"${{ inputs.dotnet-version }}\", \"framework\": \"\" } ]"
            echo "matrix=$json" >> $GITHUB_OUTPUT
          fi

  dotnet-build-and-test:
    needs: prepare-matrix
    runs-on: ${{ inputs.os }}
    strategy:
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            aka.ms:443
            api.codecov.io:443
            api.nuget.org:443
            builds.dotnet.microsoft.com:443
            ci.dot.net:443
            cli.codecov.io:443
            crl3.digicert.com:80
            dc.services.visualstudio.com:443
            dotnetcli.azureedge.net:443
            github.com:443
            storage.googleapis.com:443

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Cache .NET packages
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # 4.2.4
        with:
          path: ~/.nuget/packages # Path to the NuGet package cache
          key: ${{ inputs.os }}-${{ matrix.dotnet-version }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ inputs.os }}-${{ matrix.dotnet-version }}-nuget-

      - name: Restore packages
        working-directory: ${{ inputs.working-directory }}
        run: dotnet restore --use-lock-file

      - name: Verify ALL lock files are up-to-date
        working-directory: ${{ inputs.working-directory }}
        run: |
          dotnet restore /bl
          stale_files=0
          while IFS= read -r lockfile; do
            if ! git diff --exit-code "$lockfile" > /dev/null; then
              echo "‚ùå Lock file out of date: $lockfile"
              stale_files=1
            fi
          done < <(find . -name "packages.lock.json" -type f)
          if [ $stale_files -ne 0 ]; then
            echo "Run 'dotnet restore' locally and commit updated lock files."
            exit 1
          fi

      - name: Build
        working-directory: ${{ inputs.working-directory }}
        run: dotnet build --no-restore --configuration Release

      - name: Run unit tests
        working-directory: ${{ inputs.working-directory }}
        # run: >
        #   dotnet test
        #   --no-restore
        #   --configuration Release
        #   --logger "GitHubActions;summary.includePassedTests=true;summary.includeSkippedTests=true;annotations.titleFormat=@test;annotations.messageFormat=@error\n@trace"
        #   /p:CollectCoverage=true
        #   --
        #   RunConfiguration.CollectSourceInformation=true
        run: |
          if [ -n "${{ matrix.framework }}" ]; then
            dotnet test --no-build --configuration Release --framework ${{ matrix.framework }} --logger "GitHubActions;summary.includePassedTests=true;summary.includeSkippedTests=true;annotations.titleFormat=@test;annotations.messageFormat=@error\n@trace" /p:CollectCoverage=true
          else
            dotnet test --no-build --configuration Release --logger "GitHubActions;summary.includePassedTests=true;summary.includeSkippedTests=true;annotations.titleFormat=@test;annotations.messageFormat=@error\n@trace" /p:CollectCoverage=true
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00 # v5.5.0
        if: inputs.codecov-slug != ''
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./reports/coverage/
          fail_ci_if_error: false
          flags: ${{ inputs.codecov-flag }}, ${{ matrix.dotnet-version }}, ${{ inputs.os }}
          slug: ${{ inputs.codecov-slug }}
