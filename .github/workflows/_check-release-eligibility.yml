name: check-release-eligibility

on:
  workflow_call:
    inputs:
      is-release-branch:
        description: "If this is a release branch (e.g., main)"
        type: boolean
        required: true
      force-release:
        description: "Force a release regardless of PR labels"
        type: boolean
        required: false
        default: false
    secrets:
      GITHUB_ACCESS_TOKEN:
        description: "GitHub token"
        required: true
    outputs:
      should-release:
        description: "Boolean indicating if release should happen"
        value: ${{ jobs.check-release-eligibility.outputs.should-release }}

permissions:
  contents: read
  pull-requests: read

jobs:
  check-release-eligibility:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.set-output.outputs.should-release }}
    steps:
      - name: Determine release eligibility
        id: set-output
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_ACCESS_TOKEN }}
        run: |
          should_release=false

          if [ "${{ inputs.force-release }}" == "true" ]; then
            # Force release overrides everything
            should_release=true
          elif [ "${{ inputs.is-release-branch }}" == "true" ]; then
            # Get merged PRs since last release tag
            LAST_TAG=$(gh api repos/${GITHUB_REPOSITORY}/tags --jq '.[0].name' --silent)
            if [ -z "$LAST_TAG" ]; then
              RANGE="$GITHUB_SHA"
            else
              RANGE="$LAST_TAG..$GITHUB_SHA"
            fi

            # Get commits in range and their associated PRs
            PRS=$(gh api repos/${GITHUB_REPOSITORY}/commits \
              -f sha="$GITHUB_SHA" \
              --jq '.[] | select(.commit.message | test("#[0-9]+")) | .commit.message' \
              --silent | grep -oE '#[0-9]+' | sort -u | tr -d '#')

            for pr in $PRS; do
              LABELS=$(gh api repos/${GITHUB_REPOSITORY}/pulls/$pr --jq '.labels[].name' --silent)
              if ! echo "$LABELS" | grep -q "no-release"; then
                should_release=true
                break
              fi
            done
          fi

          echo "should-release=$should_release" >> $GITHUB_OUTPUT
